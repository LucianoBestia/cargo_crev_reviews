// auto_generated_mod.rs

// generated by `cargo auto` automation task
// Please, don't modify manually.
use crate::rpc_methods_mod::*;

pub fn match_request_method_and_call_function(request_method: &str, request_data: serde_json::Value) -> anyhow::Result<String> {
    match request_method {
        "rpc_review_list" => rpc_reviews_list(request_data),
        "rpc_review_new" => rpc_review_new(request_data),
        "rpc_review_save" => rpc_review_save(request_data),
        "rpc_review_edit" => rpc_review_edit(request_data),
        "rpc_review_edit_or_new" => rpc_review_edit_or_new(request_data),
        "rpc_review_new_version" => rpc_review_new_version(request_data),
        "rpc_review_publish" => rpc_review_publish(request_data),
        "rpc_update_registry_index" => rpc_update_registry_index(request_data),
        "rpc_review_open_source_code" => rpc_review_open_source_code(request_data),
        "rpc_review_delete" => rpc_review_delete(request_data),
        "rpc_verify_project" => rpc_verify_project(request_data),
        _ => anyhow::bail!("unknown server method = {}", request_method),
    }
}

// proxy for public functions on client
pub mod rpc_client {
    use crate::response_post_mod::return_rpc_response;
    use function_name::named;

    #[named]
    pub fn page_review_list<T>(response_data: T, response_html: &str) -> anyhow::Result<String>
    where
        T: serde::Serialize,
    {
        let response_method = function_name!();
        Ok(return_rpc_response(response_method, response_data, response_html))
    }

    #[named]
    pub fn page_review_new<T>(response_data: T, response_html: &str) -> anyhow::Result<String>
    where
        T: serde::Serialize,
    {
        let response_method = function_name!();
        Ok(return_rpc_response(response_method, response_data, response_html))
    }
    #[named]
    pub fn page_review_edit<T>(response_data: T, response_html: &str) -> anyhow::Result<String>
    where
        T: serde::Serialize,
    {
        let response_method = function_name!();
        Ok(return_rpc_response(response_method, response_data, response_html))
    }
    #[named]
    pub fn page_review_error<T>(response_data: T, response_html: &str) -> anyhow::Result<String>
    where
        T: serde::Serialize,
    {
        let response_method = function_name!();
        Ok(return_rpc_response(response_method, response_data, response_html))
    }
    #[named]
    pub fn page_review_publish_modal<T>(response_data: T, response_html: &str) -> anyhow::Result<String>
    where
        T: serde::Serialize,
    {
        let response_method = function_name!();
        Ok(return_rpc_response(response_method, response_data, response_html))
    }
    #[named]
    pub fn page_verify_list<T>(response_data: T, response_html: &str) -> anyhow::Result<String>
    where
        T: serde::Serialize,
    {
        let response_method = function_name!();
        Ok(return_rpc_response(response_method, response_data, response_html))
    }
}
